<?php
/**
 * @package   AkeebaReleaseSystem
 * @copyright Copyright (c)2010-2023 Nicholas K. Dionysopoulos / Akeeba Ltd
 * @license   GNU General Public License version 3, or later
 */

namespace Akeeba\Component\ARS\Site\View\Update;

defined('_JEXEC') or die;

use Akeeba\Component\ARS\Administrator\Mixin\ViewTaskBasedEventsTrait;
use Akeeba\Component\ARS\Site\Model\EnvironmentsModel;
use Akeeba\Component\Compatibility\Administrator\Extension\CompatibiltyComponent;
use Akeeba\Component\Compatibility\Site\Model\CompatibilityModel;
use Joomla\CMS\Factory;
use Joomla\CMS\MVC\View\HtmlView;

class XmlView extends HtmlView
{
	use Common;
	use ViewTaskBasedEventsTrait;

	public $items = [];

	public $published = false;

	public $updates_name = '';

	public $updates_desc = '';

	public $category = 0;

	public $envs = [];

	public $showChecksums = false;

	public $filteredItemIDs = null;

	public function onBeforeDisplay()
	{
		$task = $this->getModel()->getState('task', 'all');

		if (!in_array($task, ['all', 'category', 'stream', 'jed']))
		{
			$this->doTask = 'all';
		}

		$this->document->setMimeEncoding('text/xml');

		@ob_start();
	}

	public function onAfterDisplay()
	{
		$document  = @ob_get_clean();
		$params    = Factory::getApplication()->getParams('com_ars');
		$minifyXML = $params->get('minify_xml', 1) == 1;

		$dom                     = new \DOMDocument('1.0', 'UTF-8');
		$dom->preserveWhiteSpace = false;
		$dom->formatOutput       = !$minifyXML;

		$dom->loadXML($document);
		unset($document);

		/**
		 * Insert a vanity comment in the non-minified output.
		 *
		 * I only ever use this when debugging the update stream generation. The production site always has minification
		 * turned on. Since we're charged per byte transferred for updates it makes sense :)
		 */
		if (!$minifyXML)
		{
			$rootNode = $dom->firstChild;

			$dom->removeChild($rootNode);

			$comment = $dom->createComment(sprintf('Generated by Akeeba Release System on %s', (clone Factory::getDate())->format('Y-m-d H:i:s T')));

			$dom->insertBefore($comment);
			$dom->insertBefore($rootNode);
		}

		echo $dom->saveXML();
	}

	protected function onBeforeAll(): void
	{
		$this->commonSetup();

		$params = Factory::getApplication()->getParams('com_ars');

		$this->updates_name = $params->get('updates_name', '');
		$this->updates_desc = $params->get('updates_desc', '');

		$this->setLayout('all');
	}

	protected function onBeforeCategory(): void
	{
		$this->commonSetup();

		$this->setLayout('category');
	}

	protected function onBeforeStream(): void
	{
		$this->commonSetup();

		/** @var EnvironmentsModel $envModel */
		$envModel = $this->getModel('Environments');
		$params   = Factory::getApplication()->getParams('com_ars');

		$this->envs          = $envModel->getEnvironmentXMLTitles();
		$this->showChecksums = $params->get('show_checksums', 0) == 1;

		$this->setLayout('stream');

		/**
		 * Use Version Compatibility information to cut down the number of displayed versions?
		 */
		if ($params->get('use_compatibility', 1) == 1)
		{
			$this->applyVersionCompatibilityUpdateStreamFilter();
		}
	}
}